# -*- coding: utf-8 -*-
"""course_project_01_personal_expense_tracker.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MeEjvfCgZFSElDZTo2eznoCErtvzZsuZ

# Course End Project: Personal Expense Tracker
## Problem Statement
In today’s fast-paced world, individuals need to track and manage their expenses effectively. Your task is to build a personal expense tracker that allows users to log daily expenses, categorize them, and track spending against a monthly budget. The tracker should also be able to save and load expenses from a file for future reference.

## Objectives:
1.
Design and implement a personal expense tracker that enables users to manage their expenses
2.
Allow users to categorize expenses and set monthly budgets
3.
Implement file-handling functionality to save and load expense data
4.
Create an interactive, menu-driven interface for ease of use

### Steps to perform

#### 1. Add an expense:
#####     Add expense from Card Service Data
#### 4. Save and Load expenses:
#####     Load Expenses from a Data file
#####     Save Expenses in a  Data file
"""

from pickle import load
import datetime
import csv

# Create a function to prompt user for the expesne details
def add_expense():
    # Prompt the user for the expense details
    print("Enter the expense details:")
    # Date
    while True:
      date = input("Enter the date (YYYY-MM-DD): ")
      try:
        datetime.datetime.strptime(date, "%Y-%m-%d")
        break
      except ValueError:
        print("Invalid date format. Please enter the date in the format YYYY-MM-DD.")
    # Category
    category = input("Enter the expense category: ")
    # Amount
    while True:
      try:
        amount = float(input("Enter the expense amount: $ "))
        break # Exit the loop if the input is valid
      except ValueError:
        print("Invalid amount. Please enter a valid number.")
    # Description
    description = input("Enter the expense description: ")
    # store the expense as a dictionary
    expenses={"date": date, "category": category, "amount": amount, "description": description}
    print("Expense added successfully!")
    return expenses

def save_expense_to_csv(file_name, expense_list):
    # Save Expenses to CSV file
    #file_name = "expense_current.csv"
    with open(file_name, mode="a", newline="") as file:
        writer = csv.DictWriter(file, fieldnames=["date", "amount", "category", "description"])
        # Write the header only if the file is empty (optional)
        if file.tell() == 0:  # Check if the file is at the start (empty)
            #file.write("Expenses for current month\n")  # Write the title. CReating issues while reading
            writer.writeheader() # Write the column headers, no arguments needed

        # Write the rows (must be inside the 'with' block)
        writer.writerows(expense_list) # Writes the list of dictionaries
    print(f"Expenses have been saved to '{file_name}'.")

# Main Program

# Manually Enter Expense Data
expense_list = []
while True:
    choice = input("Do you want to add an expense? (y/n): ")
    if choice.lower() == 'n':
        break
    elif choice.lower() == 'y':
        expense_list.append(add_expense())
        print(expense_list)
    else:
        print("Invalid choice. Please enter 'y' or 'n'.")

for row in expense_list:
    print(row)

# Save the Expense Data
file_name = "expense_current.csv"
if not expense_list:
    print("The dictionary is empty.")
else:
    print("The dictionary is not empty.")
    save_expense_to_csv(file_name, expense_list)

"""#### 1. Add an expense:
#####     Add expense from Card Service Data
#### 4. Save and Load expenses:
#####     Load Expenses from a Data file
#####     Save Expenses in a  Data file
"""

# Load expense_data_card.csv File, read, parse, write the data
import csv
import datetime

def load_data_from_csv(file_path):
    # read the csv file and store in variable 'data'
    data = []
    with open(file_path, 'r') as file:
        csv_reader = csv.DictReader(file)
        for row in csv_reader:
            data.append(row)
    # Parse through the data and save the Selected Categories and store in variable 'expense_list'
    # This data file was downloaed from Chase Credit Card Service, It has more columns
    # Column header were "Transaction Date","Post Date","Description","Category","Type","Amount","Memo"
    expense_list = []
    for row in data:
        #print(row)
        if not row.get('Transaction Date'):  # Check if 'Transaction Date' is missing or has an empty/None value
            print("Error: No value found for 'Transaction Date'. Please check your data.")
        else:
            date_string = row['Transaction Date']
            #print(date_string)
            date = datetime.datetime.strptime(date_string, "%m/%d/%Y").strftime("%Y-%m-%d")
        #print(date)

        if not row.get('Category'):  # Check if 'Category' is missing or has an empty/None value
            print("Error: No value found for 'Category'. Please check your data.")
        else:
            category = row['Category']
        #print(category)


        if not row.get('Amount'):  # Check if 'Amount' is missing or has an empty/None value
            print("Error: No value found for 'Amount'. Please check your data.")
        else:
            amount_string = row['Amount']
            amount = abs(float(amount_string.replace('$', '')))
         #print(amount)

        if not row.get('Description'):  # Check if 'Description' is missing or has an empty/None value
            print("Error: No value found for 'Description'. Please check your data.")
        else:
            description = row['Description']
        #print(description)

        # store the expense as a dictionary
        expenses={"date": date, "category": category, "amount": amount, "description": description}
        #print(expenses)
        expense_list.append(expenses)


    print("Expenses loaded successfully!")
    return expense_list

# Main Program

# Load Expense Data from Card Service data files
file_path="expense_data_card.csv"
expense_list_card = load_data_from_csv(file_path)
for row in expense_list_card:
    print(row)

# Save the Expense Data
file_name = "expense_current.csv"
if not expense_list:
    print("The dictionary is empty.")
else:
    print("The dictionary is not empty.")
    save_expense_to_csv(file_name, expense_list_card)

"""#View expenses:

##Write a function to retrieve and display all stored expenses

*   Ensure the function loops through the list of expenses and displays the date, category, amount, and description for each entr



"""

# Read expense_current.csv and View Expenses
import csv
from collections import defaultdict

def read_expenses_from_csv(file_path):
    # Use defaultdict to group expenses by date
    expenses = defaultdict(list)

    with open(file_path, mode="r") as file:
        # Skip the first line (header row)
        # next(file)
        # Use csv.DictReader with the second header line
        csv_reader = csv.DictReader(file)  # Read the CSV as dictionaries
        # print("Headers found in CSV file:", csv_reader.fieldnames)  # Debug the headers
        for row in csv_reader:
            print(row)
            # Add each row of data to the dictionary
            date = row["date"]
            amount = float(row["amount"])
            category = row["category"]
            description = row["description"]
            # Append the expense details to the list for the specific date
            expenses[date].append({
                "amount": amount,
                "category": category,
                "description": description,
            })

    return dict(expenses)  # Convert defaultdict back to a regular dictionary

# File path to the CSV file
file_path = "expense_current.csv"

# Read expenses
expenses_for_current_month = read_expenses_from_csv(file_path)

# Print the expenses dictionary
print(expenses_for_current_month)

# Print the grouped expenses
for date, details in expenses_for_current_month.items():
    print(f"Date: {date}")
    for expense in details:
        print(f"  Amount: ${expense['amount']:.2f}, Category: {expense['category']}, Description: {expense['description']}")

"""## Validate the data before displaying it

*   if any required details (date, category, amount, or description) are missing, skip the entry or notify the user that it’s incomplete
"""

import csv
def validate_and_display_expenses(file_path):
    with open(file_path, mode="r") as file:
        # Skip the first line (header row)
        next(file)
        csv_reader = csv.DictReader(file)
        print("Valid Expenses:")

        for row in csv_reader:
            # Check if all required fields are present and non-empty
            print(row)
            if not row.get("date") or not row.get("amount") or not row.get("category") or not row.get("description"):
                print(f"\nIncomplete data found and skipped: {row}")
                continue  # Skip to the next row if any field is missing

            # Optionally convert and validate `amount` as a float
            try:
                amount = float(row["amount"])
            except ValueError:
                print(f"Invalid amount found and skipped: {row['amount']}")
                continue

            # Display the valid expense
            print(f"Date: {row['date']}, Amount: ${amount:.2f}, Category: {row['category']}, Description: {row['description']}")

# Example usage
file_path = "expense_current.csv"
validate_and_display_expenses(file_path)

"""# Set and track the budget

*   Create a function that allows the user to input a monthly budget. Prompt the user to:
    *   Enter the total amount they want to budget for the month
*   Create another function that calculates the total expenses recorded so far
    *   Compare the total with users monthly budget,
    *   If the total expense exceed the budget, display a warning (Example: You have exceeded your budget!)
    *   If the expense are within the budget, display the remianing balance (Example: You have 150 left for the month)




"""

# Create a function that allows the user to input a monthly budget. Prompt the user to:
# Enter the total amount they want to budget for the month
def set_budget():
    budget = float(input("Enter the total amount you want to budget for the month: $"))
    return budget

def calculate_total_expenses(file_path):
    with open(file_path, mode="r") as file:
        # Skip the first line (header row)
        # next(file)
        csv_reader = csv.DictReader(file)
        print("Adding all the expenses to get the Total Expense this month:")
        total_amount = 0.0
        for row in csv_reader:
            # print(row)
            # Add each row of data to the dictionary
            date = row["date"]
            amount = float(row["amount"])
            category = row["category"]
            description = row["description"]
            # Display the valid expense
            #print(f"Date: {date}, Amount: ${amount}, Category: {category}, Description: {description}")

            total_amount = total_amount + amount
        print(f"Total Expense = $",total_amount)
        return total_amount

def track_expenses(budget,expense):
    print("Tracking Expenses")
    if expense > budget:
        print("You have exceeded your budget!")
    else:
        remaining_budget = budget - expense
        print("You have ", remaining_budget, "left for the month")


# Main Program
total_budget = set_budget()
print(f"Total Budget = $",total_budget)

file_path = "expense_current.csv"
total_expense = calculate_total_expenses(file_path)
track_expenses(total_budget,total_expense)

"""# Create an interactive menu:
## Build a function to display a menu with the following options:
o Add expense

o View expenses

o Track budget

o Save expenses

o Exit
#Allow the user to enter a number to choose an option
#Implement the following conditions:
o If the user selects option 1, call the function to add an expense

o If the user selects option 2, call the function to view expenses

o If the user selects option 3, call the function to track the budget

o If the user selects option 4, call the function to save expenses to the file

o If the user selects option 5, save the expenses and exit the program

"""

# Interactive menu
# Interactive menu
# Author : Santanu Chandra
# Date : 03/16/2025
# Version: 2025.1
def menu():
    while True:
        print("\nMenu:")
        print("1. Add expense")
        print("2. View expenses")
        print("3. Track budget")
        print("4. Save expenses")
        print("5. Exit")
        choice = input("Enter your choice (1-5): ")

        if choice == "1":
            print("Adding an expense :\n  1. Add data manually \n  2. Load card expense data ")
            choice = input("     Enter your choice (1-2): ")
            if choice == "1":
                # Manually Enter Expense Data
                print("Follow the prompt to enter the expense details:")
                expense_list = []
                while True:
                    choice = input("Do you want to add an expense? (y/n): ")
                    if choice.lower() == 'n':
                        break
                    elif choice.lower() == 'y':
                        expense_list.append(add_expense())
                        print(expense_list)
                    else:
                        print("Invalid choice. Please enter 'y' or 'n'.")
                '''
                # Print the Expense Data
                for row in expense_list:
                    print(row)
                '''
                # Save the Expense Data
                file_name = "expense_current.csv"
                if not expense_list:
                    print("The dictionary is empty.")
                else:
                    print("The dictionary is not empty.")
                    save_expense_to_csv(file_name, expense_list)
            elif choice == "2":
                # Load Expense Data from Card Service data files
                default_file="expense_data_card.csv" # Define the default value
                file_path = input(f"Enter the filename in format (default: {default_file}): ") or default_file
                print(f"The file path is: {file_path}")
                print("Loading card expense data")
                expense_list_card = load_data_from_csv(file_path)
                '''
                # Print the Expense Data
                for row in expense_list_card:
                    print(row)
                '''
                # Save the Expense Data
                file_name = "expense_current.csv"
                if not expense_list_card:
                    print("The dictionary is empty.")
                else:
                    print("The dictionary is not empty.")
                    save_expense_to_csv(file_name, expense_list_card)

        elif choice == "2":
            print("Validating expenses")
            file_path = "expense_current.csv"
            validate_and_display_expenses(file_path)
            print("Viewing expenses")
            # Read expenses
            expenses_for_current_month = read_expenses_from_csv(file_path)

            # Print the grouped expenses
            for date, details in expenses_for_current_month.items():
                print(f"Date: {date}")
                for expense in details:
                    print(f"  Amount: ${expense['amount']:.2f}, Category: {expense['category']}, Description: {expense['description']}")
            #view_expenses()
        elif choice == "3":
            print("Tracking budget")
            total_budget = set_budget()
            print(f"Total Budget = $",total_budget)
            file_path = "expense_current.csv"
            total_expense = calculate_total_expenses(file_path)
            track_expenses(total_budget,total_expense)
            #track_budget()
        elif choice == "4":
            print("Expense saved at each previous step ")
            #save_expenses()
        elif choice == "5":
            #save_expenses()
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice. Please select a valid option.")

# Run the program
menu()